package com.example.hayet

import android.content.ContentValues
import android.content.Context
import android.database.sqlite.SQLiteDatabase
import android.database.sqlite.SQLiteOpenHelper

// Product data class to represent products
data class Product(
    val id: Int = 0, // ID for the product, autogenerated by SQLite
    val name: String,
    val price: Double,
    val description: String,
    val imageUrl: Int // Resource ID for the image
)

// SQLite Database Helper
class DatabaseHelper(context: Context) : SQLiteOpenHelper(context, DATABASE_NAME, null, DATABASE_VERSION) {

    companion object {
        // Database and table information
        private const val DATABASE_NAME = "products.db"
        private const val DATABASE_VERSION = 1
        const val TABLE_NAME = "products"
        const val COLUMN_ID = "id"
        const val COLUMN_NAME = "name"
        const val COLUMN_PRICE = "price"
        const val COLUMN_DESCRIPTION = "description"
        const val COLUMN_IMAGE_URL = "imageUrl"
    }

    override fun onCreate(db: SQLiteDatabase?) {
        // SQL query to create the products table
        val createTableQuery = """
            CREATE TABLE $TABLE_NAME (
                $COLUMN_ID INTEGER PRIMARY KEY AUTOINCREMENT,
                $COLUMN_NAME TEXT NOT NULL,
                $COLUMN_PRICE REAL NOT NULL,
                $COLUMN_DESCRIPTION TEXT NOT NULL,
                $COLUMN_IMAGE_URL INTEGER NOT NULL
            )
        """
        db?.execSQL(createTableQuery) // Execute the table creation query
    }

    override fun onUpgrade(db: SQLiteDatabase?, oldVersion: Int, newVersion: Int) {
        // Drop the old table if it exists and recreate it
        db?.execSQL("DROP TABLE IF EXISTS $TABLE_NAME")
        onCreate(db)
    }

    // Insert a new product into the database
    fun insertProduct(name: String, price: Double, description: String, imageUrl: Int): Long {
        val db = writableDatabase
        val values = ContentValues().apply {
            put(COLUMN_NAME, name)
            put(COLUMN_PRICE, price)
            put(COLUMN_DESCRIPTION, description)
            put(COLUMN_IMAGE_URL, imageUrl)
        }
        return db.insert(TABLE_NAME, null, values) // Insert the values into the table
    }

    // Retrieve all products from the database
    fun getAllProducts(): List<Product> {
        val productList = mutableListOf<Product>()
        val db = readableDatabase
        val cursor = db.query(TABLE_NAME, null, null, null, null, null, null) // Query the table

        cursor.use {
            if (cursor.moveToFirst()) {
                do {
                    // Read values from the cursor
                    val id = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_ID))
                    val name = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_NAME))
                    val price = cursor.getDouble(cursor.getColumnIndexOrThrow(COLUMN_PRICE))
                    val description = cursor.getString(cursor.getColumnIndexOrThrow(COLUMN_DESCRIPTION))
                    val imageUrl = cursor.getInt(cursor.getColumnIndexOrThrow(COLUMN_IMAGE_URL))
                    productList.add(Product(id, name, price, description, imageUrl)) // Add product to list
                } while (cursor.moveToNext())
            }
        }
        return productList
    }

    // Update an existing product
    fun updateProduct(id: Int, name: String, price: Double, description: String, imageUrl: Int): Int {
        val db = writableDatabase
        val values = ContentValues().apply {
            put(COLUMN_NAME, name)
            put(COLUMN_PRICE, price)
            put(COLUMN_DESCRIPTION, description)
            put(COLUMN_IMAGE_URL, imageUrl)
        }
        return db.update(TABLE_NAME, values, "$COLUMN_ID = ?", arrayOf(id.toString()))
    }

    // Delete a product from the database
    fun deleteProduct(id: Int): Int {
        val db = writableDatabase
        return db.delete(TABLE_NAME, "$COLUMN_ID = ?", arrayOf(id.toString()))
    }

    // Insert default products into the database (for testing)
    fun insertDefaultProducts() {
        if (getAllProducts().isEmpty()) { // Only insert if the table is empty
            val defaultProducts = listOf(
                Product(0, "Product 1", 10.0, "Description for Product 1", R.drawable.product1),
                Product(0, "Product 2", 20.0, "Description for Product 2", R.drawable.product2),
                Product(0, "Product 3", 30.0, "Description for Product 3", R.drawable.product3),
            )
            defaultProducts.forEach { product ->
                insertProduct(product.name, product.price, product.description, product.imageUrl)
            }
        }
    }
}
